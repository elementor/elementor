# CSS Converter Atomic-Only Contract

## üö® CRITICAL: Zero Fallback Policy

**ALL widget and CSS related JSON MUST be generated by the atomic widgets module**

**NO SINGLE FALLBACK IS ALLOWED**

---

## üìã Atomic-Only Requirements

### Mandatory Sources for All JSON Generation

#### ‚úÖ ONLY These Sources Are Allowed:
- **Elementor Atomic Widgets Module**: `/plugins/elementor/modules/atomic-widgets/`
- **Atomic Widget Elements**: `/plugins/elementor/modules/atomic-widgets/elements/`
- **Atomic Prop Types**: `/plugins/elementor/modules/atomic-widgets/prop-types/`
- **Atomic Style Definitions**: `/plugins/elementor/modules/atomic-widgets/styles/`

#### ‚ùå FORBIDDEN Sources:
- **Enhanced_Property_Mapper** - NEVER use this
- **Generic property mappers** - NEVER create these
- **String fallbacks** - NEVER default to string types
- **Custom JSON generation** - NEVER create JSON outside atomic widgets
- **Hardcoded property structures** - NEVER assume JSON formats

---

## üîç Violation Detection Markers

### Every Response Must Include This Section:

```
üéØ ATOMIC-ONLY COMPLIANCE CHECK:
- Widget JSON source: [Specific atomic widget class]
- Property JSON source: [Specific atomic prop type]
- Fallback usage: [NONE - or VIOLATION if any fallback used]
- Custom JSON creation: [NONE - or VIOLATION if any custom JSON]
- Enhanced_Property_Mapper usage: [NONE - or VIOLATION if used]
```

### Violation Indicators:
- ‚ùå **RED FLAG**: Any mention of "Enhanced_Property_Mapper"
- ‚ùå **RED FLAG**: Any mention of "fallback" or "default" property handling
- ‚ùå **RED FLAG**: Creating JSON structures not from atomic widgets
- ‚ùå **RED FLAG**: Using `create_v4_property()` instead of `create_v4_property_with_type()`
- ‚ùå **RED FLAG**: String type usage where specific atomic types exist

---

## üìù Mandatory Documentation Format

### For Every Property Mapper Implementation:

```php
/**
 * [Property Name] Property Mapper
 * 
 * üéØ ATOMIC SOURCE VERIFICATION:
 * - Atomic Widget: [specific file path and class name]
 * - Prop Type: [specific prop type file and class]
 * - Expected Structure: [exact JSON structure from prop type]
 * - Validation Rules: [rules from atomic prop type]
 * 
 * üö´ FALLBACK STATUS: NONE - This mapper has zero fallbacks
 * 
 * ‚úÖ COMPLIANCE: 100% atomic widget based
 */
```

### For Every JSON Generation:

```php
// üéØ ATOMIC SOURCE: Size_Prop_Type from /atomic-widgets/prop-types/size-prop-type.php
// üö´ FALLBACK: NONE
// ‚úÖ STRUCTURE: Matches atomic widget exactly
return $this->create_v4_property_with_type( $property, 'size', [
    'size' => (float) $numeric_value,  // Type enforced by atomic widget
    'unit' => $unit_string              // Structure from atomic widget
]);
```

---

## üö® Implementation Rules

### Property Mapper Creation Process:

#### Step 1: Atomic Widget Research (MANDATORY)
```
1. Find the atomic widget that uses this property
2. Locate the specific prop type file
3. Study the prop type's define_shape() method
4. Document the expected structure
5. Note all validation rules
```

#### Step 2: Implementation Verification (MANDATORY)
```
1. Use ONLY atomic widget structures
2. Reference ONLY atomic prop types
3. Create ZERO custom JSON formats
4. Implement ZERO fallback mechanisms
5. Use ONLY create_v4_property_with_type()
```

#### Step 3: Compliance Documentation (MANDATORY)
```
1. Document atomic widget source
2. Document prop type source
3. Confirm zero fallbacks
4. Verify structure matches atomic widget
5. Add violation detection markers
```

---

## üîç Self-Audit Checklist

### Before Any Implementation:

- [ ] **Have I identified the specific atomic widget?**
- [ ] **Have I located the exact prop type file?**
- [ ] **Do I understand the atomic widget's expected structure?**
- [ ] **Am I using create_v4_property_with_type() with correct type?**
- [ ] **Am I creating ZERO fallback mechanisms?**
- [ ] **Am I generating ZERO custom JSON structures?**
- [ ] **Have I documented the atomic source?**
- [ ] **Have I added violation detection markers?**

### Red Flag Self-Check:

- [ ] **Am I using Enhanced_Property_Mapper?** ‚Üí VIOLATION
- [ ] **Am I creating fallback logic?** ‚Üí VIOLATION  
- [ ] **Am I using string types for known atomic types?** ‚Üí VIOLATION
- [ ] **Am I generating custom JSON?** ‚Üí VIOLATION
- [ ] **Am I making assumptions about structure?** ‚Üí VIOLATION

---

## üìä Compliance Verification

### Acceptable Property Mapper:

```php
class Font_Size_Property_Mapper extends Modern_Property_Mapper_Base {
    /**
     * üéØ ATOMIC SOURCE: atomic-heading.php uses Size_Prop_Type
     * üö´ FALLBACK: NONE
     * ‚úÖ COMPLIANCE: 100% atomic widget based
     */
    
    public function map_to_v4_atomic( string $property, $value ): ?array {
        // üéØ ATOMIC SOURCE: Size_Prop_Type validation
        $parsed = $this->parse_size_value( $value );
        if ( null === $parsed ) {
            return null; // Fail fast, no fallback
        }
        
        // üéØ ATOMIC SOURCE: Size_Prop_Type structure
        return $this->create_v4_property_with_type( $property, 'size', $parsed );
    }
}
```

### VIOLATION Example (NEVER DO THIS):

```php
class Bad_Property_Mapper extends Property_Mapper_Base {
    public function map_to_v4_atomic( string $property, $value ): ?array {
        // ‚ùå VIOLATION: Using Enhanced_Property_Mapper
        return $this->enhanced_mapper->map_to_v4_atomic( $property, $value );
        
        // ‚ùå VIOLATION: Custom JSON creation
        return [ 'property' => $property, 'value' => $value ];
        
        // ‚ùå VIOLATION: String fallback
        return $this->create_v4_property( $property, $value );
    }
}
```

---

## üéØ Success Metrics

### 100% Compliance Indicators:
- ‚úÖ **Zero Enhanced_Property_Mapper usage**
- ‚úÖ **Zero fallback mechanisms**
- ‚úÖ **Zero custom JSON generation**
- ‚úÖ **100% atomic widget sourced structures**
- ‚úÖ **All property mappers reference specific atomic widgets**
- ‚úÖ **All JSON matches atomic prop type expectations**

### Violation Indicators:
- ‚ùå **Any Enhanced_Property_Mapper usage**
- ‚ùå **Any fallback or default handling**
- ‚ùå **Any custom JSON structures**
- ‚ùå **Any string types where atomic types exist**
- ‚ùå **Any property mapper without atomic widget source**

---

## üö® Enforcement Protocol

### When Violations Are Detected:

#### Immediate Actions:
1. **STOP all implementation immediately**
2. **Remove all fallback code**
3. **Delete all custom JSON generation**
4. **Research the correct atomic widget source**
5. **Implement using ONLY atomic widget structures**

#### Documentation Requirements:
1. **Document the atomic widget source**
2. **Document the prop type source**
3. **Confirm zero fallbacks**
4. **Add compliance verification markers**
5. **Test against atomic widget expectations**

---

## üéØ Pre-Approved Actions (No Permission Required)

### When User Has Explicitly Requested:

#### ‚úÖ **PROCEED IMMEDIATELY** for these explicitly requested actions:
- **Remove Enhanced_Property_Mapper** - User has approved complete removal
- **Remove all fallback mechanisms** - User has approved breaking changes
- **Delete non-atomic JSON generation** - User has approved atomic-only enforcement
- **Update code to prevent fallbacks** - User has approved prevention mechanisms
- **Break existing functionality** - User has approved intentional breaking changes
- **Add atomic-only enforcement** - User has approved strict compliance

#### ‚úÖ **NO PERMISSION NEEDED** when implementing:
- **Atomic widget research and implementation** - Always approved
- **Removal of Enhanced_Property_Mapper usage** - Always approved
- **Addition of atomic compliance checks** - Always approved
- **Documentation updates for atomic-only** - Always approved
- **Error logging for missing atomic mappers** - Always approved

#### ‚ö†Ô∏è **STILL REQUIRE PERMISSION** for:
- **Adding NEW functionality** not explicitly requested
- **Changing USER-FACING behavior** beyond atomic compliance
- **Modifying EXTERNAL APIs** or interfaces
- **Creating NEW architectural patterns** not related to atomic widgets

### Response Format for Pre-Approved Actions:

```
üéØ ATOMIC-ONLY COMPLIANCE CHECK:
- Widget JSON source: [Specific atomic widget class or N/A if removal]
- Property JSON source: [Specific atomic prop type or N/A if removal]
- Fallback usage: NONE - [Action taken to ensure zero fallbacks]
- Custom JSON creation: NONE - [Action taken to prevent custom JSON]
- Enhanced_Property_Mapper usage: NONE - [Action taken to remove/prevent usage]

‚úÖ PRE-APPROVED ACTION: [Specific action being taken]
- User Request: [Reference to user's explicit request]
- Atomic Compliance: [How this action enforces atomic-only compliance]
- Breaking Changes: [Acknowledged - user approved breaking changes]
```

---

## üí° Remember: Atomic Widgets Are The ONLY Source

- **Every JSON structure** must come from atomic widgets
- **Every property type** must be defined by atomic prop types
- **Every validation rule** must match atomic widget expectations
- **Zero exceptions** - no fallbacks, no custom JSON, no shortcuts

**The atomic widgets module is the single source of truth for ALL widget and CSS JSON generation.**