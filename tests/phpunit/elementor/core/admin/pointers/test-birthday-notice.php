<?php

namespace Elementor\Tests\Phpunit\Elementor\Core\Admin\Pointers;

use Elementor\Core\Admin\PointerNotices\Birthday as Birthday_Notice;
use PHPUnit\Framework\TestCase as PHPUnit_TestCase;

class Test_Birthday_Notice extends PHPUnit_TestCase {
	const IS_ADMIN_PAGE = 'is_admin_page';
	const IS_DASHBOARD_PAGE = 'is_dashboard_page';
	const IS_USER_ALLOWED = 'is_user_allowed';
	const IS_DISMISSED = 'is_dismissed';
	const IS_CAMPAIGN_TIME = 'is_campaign_time';
	const IS_ALREADY_SEEN_TODAY = 'is_already_seen_today';

	public function setUp(): void {
		parent::setUp(); // TODO: Change the autogenerated stub
	}

	public function tearDown(): void {}

	public function test_should_display_notice__true() {
		$birthday_notice = $this->get_notice_class_mock( [
			'is_campaign_time' => true,
		] );

		$this->assetTrue( Birthday_Notice::should_display_notice() );

		new $birthday_notice();

		$this->assertFalse( Birthday_Notice::should_display_notice() );
	}

	private function get_notice_class_mock( array $return_value_map ) {
		$mock = $this->getMockBuilder( Birthday_Notice::class )
			->setMethods( array_keys( $return_value_map ) )
			->getMock();

		foreach ( $return_value_map as $method => $return_value ) {
			$mock->method( $method )->willReturn( $return_value );
		}

		return $mock;
	}
}
