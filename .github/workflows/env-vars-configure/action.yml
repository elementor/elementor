name: Env Vars Configure
description: Sets environment variables for the workflow.

inputs:
  CHANNEL:
    required: true
    description: 'The channel to get the version to (ga, cloud, beta).'
  REF:
    required: true
    description: 'The ref to get the version from.'
  POSTFIX:
    required: false
    description: 'The postfix that will be added to the package version -rc / -test / empty string.'

runs:
  using: "composite"
  steps:
      - name: Get New Package Version
        uses: ./.github/workflows/get-new-package-version
        with:
          CHANNEL: ${{ inputs.CHANNEL }}
          POSTFIX: ${{ inputs.POSTFIX }}
      - name: Increment Patch Version
        if: inputs.CHANNEL == 'ga'
        uses: ./.github/workflows/increment-patch-version
      - shell: bash
        run: |
            # This command retrieves the latest tag that matches the specified channel and package version,
            # and extracts the version number from the tag name using awk. E.g. retrieves the number 7 from `3.11.0-cloud7`.
            # If inputs.POSTFIX == '-test', then get the latest prerelease version E.g, `3.11.0-cloud7-test`
            if [[ "${{ inputs.POSTFIX }}" == "-test" ]]; then
              CURRENT_CHANNEL_VERSION=$(git ls-remote --tags | grep "\-test" | grep -v "refs/tags/v" | grep "${{ inputs.CHANNEL }}" | grep "$(echo "${{ env.CLEAN_PACKAGE_VERSION }}" | sed 's/\./\\./g')" | tail -n1 | awk -F'${{ inputs.CHANNEL }}' '{print $2}' | awk -F'${{ inputs.POSTFIX }}' '{print $1}' || echo 0)
            else
              CURRENT_CHANNEL_VERSION=$(git ls-remote --tags | grep -v "\-rc" | grep -v "\-test" | grep -v "refs/tags/v" | grep "${{ inputs.CHANNEL }}" | grep "$(echo "${{ env.CLEAN_PACKAGE_VERSION }}" | sed 's/\./\\./g')" | tail -n1 | awk -F'${{ inputs.CHANNEL }}' '{print $2}' || echo 0)
            fi

            # If value is not a number (e.g. empty string) then set it to 0
            if ! [[ $CURRENT_CHANNEL_VERSION =~ ^[0-9]+$ ]]; then
                CURRENT_CHANNEL_VERSION=0
            fi
            echo "CURRENT_CHANNEL_VERSION=$CURRENT_CHANNEL_VERSION"
            echo "CURRENT_CHANNEL_VERSION=$CURRENT_CHANNEL_VERSION" >> $GITHUB_ENV

            # Set the build zip file name and path
            PLUGIN_ZIP_FILENAME="elementor-${PACKAGE_VERSION}.zip"

            CLEAN_REF=${{ inputs.REF }}
            # e.g. refs/heads/main -> main
            CLEAN_REF=${CLEAN_REF#refs/heads/}

            echo "CLEAN_REF=${CLEAN_REF}" >> $GITHUB_ENV

            echo "PLUGIN_ZIP_PATH=./elementor/**/*"
            echo "PLUGIN_ZIP_FILENAME=${PLUGIN_ZIP_FILENAME}"

            echo "PLUGIN_ZIP_FILENAME=${PLUGIN_ZIP_FILENAME}" >> $GITHUB_ENV
            echo "PLUGIN_ZIP_PATH=./elementor/**/*" >> $GITHUB_ENV

      - name: Get Previous Release
        uses : ./.github/workflows/get-previous-release
        with:
          CHANNEL: ${{ inputs.CHANNEL }}
          POSTFIX: ${{ inputs.POSTFIX }}
