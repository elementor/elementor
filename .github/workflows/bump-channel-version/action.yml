name: Bump Channel Version
description: Bump the version of the current channel, and set it as an environment variable. (The Bump is for the current build only, No changes are made to the repo)

inputs:
  CHANNEL:
    required: true
    description: 'The channel to bump the version to (cloud, beta or ga).'
  CLEAN_PACKAGE_VERSION:
    required: true
    description: 'The current package version, e.g. "3.11.7".'
  POSTFIX:
    required: false
    description: 'The postfix that will be added to the package version -rc / -test / empty.'
  OVERRIDE_PACKAGE_VERSION:
    required: false
    default: false
    description: 'Should override the PACKAGE_VERSION value with a custom value for the one click release process.'

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        case ${{ inputs.CHANNEL }} in
          * )
            CURRENT_CHANNEL_VERSION=${{ env.CURRENT_CHANNEL_VERSION }}
            NEW_CHANNEL_VERSION=$((CURRENT_CHANNEL_VERSION+1))
            ELEMENTOR_CHANNEL_PACKAGE_VERSION=${{ inputs.CLEAN_PACKAGE_VERSION }}-${{ inputs.CHANNEL }}${NEW_CHANNEL_VERSION}
            ;;&
          "latest" )
            NEW_CHANNEL_VERSION=-$(date +%s)
            ELEMENTOR_CHANNEL_PACKAGE_VERSION=${{ inputs.CLEAN_PACKAGE_VERSION }}-${{ inputs.CHANNEL }}${NEW_CHANNEL_VERSION}
           ;;
          "ga" )
            ELEMENTOR_CHANNEL_PACKAGE_VERSION=${{ inputs.CLEAN_PACKAGE_VERSION }}
            ;;
        esac

        echo "ELEMENTOR_CHANNEL_PACKAGE_VERSION=${ELEMENTOR_CHANNEL_PACKAGE_VERSION}"

        sed -i -E "s/Version: .*/Version: ${ELEMENTOR_CHANNEL_PACKAGE_VERSION}/g" elementor.php
        sed -i -E "s/ELEMENTOR_VERSION', '.*'/ELEMENTOR_VERSION', '${ELEMENTOR_CHANNEL_PACKAGE_VERSION}'/g" elementor.php

        echo "ELEMENTOR_CHANNEL_PACKAGE_VERSION=${ELEMENTOR_CHANNEL_PACKAGE_VERSION}"
        echo "NEW_CHANNEL_VERSION=${NEW_CHANNEL_VERSION}"

        # An overridden PACKAGE_VERSION value is used in the one click release workflow to set the release and file names
        # So that they contain their postfix and bump version number.
        # Should be unified with the code in get-new-package-version.
        if [[ ${{ inputs.OVERRIDE_PACKAGE_VERSION }} == "true" ]]; then
          echo "PACKAGE_VERSION=${ELEMENTOR_CHANNEL_PACKAGE_VERSION}${{inputs.POSTFIX}}" >> $GITHUB_ENV
        fi

        if [[ ${{ inputs.CHANNEL }} == "beta" ]]; then
          BETA_VERSION=${ELEMENTOR_CHANNEL_PACKAGE_VERSION}
        else
          BETA_VERSION=$(git ls-remote --tags | awk '{print $2}' | sed 's/^refs\/tags\/v//' | sed 's/^refs\/tags\///' | grep -E '^[0-9]+\.[0-9]+\.[0-9]-beta[1-9]$' | sort -V | tail -n 1)
        fi

        echo "BETA_VERSION=$BETA_VERSION"

        if grep -q "Beta tag:" ./readme.txt
          then
            echo "Replace existing beta tag in readme file"
            sed -i -E "s/Beta tag: .*/Beta tag: $BETA_VERSION/g" ./readme.txt
          else
            echo "Add beta tag to readme file"
            sed -i -E '/^Stable tag: .*/a\'$'\n'"Beta tag: $BETA_VERSION$(printf '\n\r')" ./readme.txt
        fi
