name: On Demand Hosting
description: On Demand Hosting

on: 
  workflow_dispatch:
    inputs:
      SITE_SUBDOMAIN:
        description: 'The site subdomain'
        required: true


permissions:
  contents: write
  pull-requests: write
  actions: read

env:
  WP_SITE_URL: https://soxkanfj.elementor.cloud
  WP_USERNAME: playwrightuser
  WP_PASSWORD: vwqt4D6Ss(&TLoDGSup01ed@

jobs:
  build-plugin:
    name: Build plugin
    uses: ./.github/workflows/build.yml

  deploy-to-hosting:
    name: Deploy to WordPress Site
    runs-on: ubuntu-22.04
    needs: [build-plugin]
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-plugin.outputs.artifact_name }}
          path: ./build
      
      - name: Install plugin via WordPress API
        run: |
          echo "Deploying to WordPress site: $WP_SITE_URL"
          echo "Built artifact downloaded to ./build"
          
          # Package the artifact
          cd ./build
          zip -r ../elementor.zip .
          cd ..
          
          # Get WordPress authentication token
          echo "Authenticating with WordPress..."
          AUTH_RESPONSE=$(curl -X POST "$WP_SITE_URL/wp-json/jwt-auth/v1/token" \
            -H "Content-Type: application/json" \
            -d "{\"username\":\"$WP_USERNAME\",\"password\":\"$WP_PASSWORD\"}" \
            -s -w "%{http_code}")
          
          HTTP_CODE="${AUTH_RESPONSE: -3}"
          RESPONSE_BODY="${AUTH_RESPONSE%???}"
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            TOKEN=$(echo $RESPONSE_BODY | jq -r '.token')
            echo ":white_check_mark: WordPress authentication successful"
          else
            echo ":information_source: JWT plugin not available, using basic auth"
            TOKEN=""
          fi
          
          # Upload plugin zip to WordPress media library
          echo "Uploading elementor.zip to WordPress media library..."
          if [ -n "$TOKEN" ]; then
            UPLOAD_RESPONSE=$(curl -X POST "$WP_SITE_URL/wp-json/wp/v2/media" \
              -H "Authorization: Bearer $TOKEN" \
              -F "file=@elementor.zip" \
              -s -w "%{http_code}")
          else
            UPLOAD_RESPONSE=$(curl -X POST "$WP_SITE_URL/wp-json/wp/v2/media" \
              --user "$WP_USERNAME:$WP_PASSWORD" \
              -F "file=@elementor.zip" \
              -s -w "%{http_code}")
          fi
          
          UPLOAD_HTTP_CODE="${UPLOAD_RESPONSE: -3}"
          UPLOAD_BODY="${UPLOAD_RESPONSE%???}"
          
          if [ "$UPLOAD_HTTP_CODE" -eq 201 ]; then
            MEDIA_URL=$(echo $UPLOAD_BODY | jq -r '.source_url')
            MEDIA_ID=$(echo $UPLOAD_BODY | jq -r '.id')
            echo ":white_check_mark: Plugin zip uploaded to WordPress media library"
            echo ":package: Media URL: $MEDIA_URL"
            echo ":id: Media ID: $MEDIA_ID"
          else
            echo ":x: Failed to upload plugin zip to WordPress"
            echo "HTTP Code: $UPLOAD_HTTP_CODE"
            echo "Response: $UPLOAD_BODY"
            exit 1
          fi
          
          # Install plugin using WP-CLI if available via REST API
          echo "Installing plugin via WordPress..."
          
          # Try to use WP-CLI via REST API (if available)
          if [ -n "$TOKEN" ]; then
            INSTALL_RESPONSE=$(curl -X POST "$WP_SITE_URL/wp-json/wp-cli/v1/cli" \
              -H "Authorization: Bearer $TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"command\":\"plugin install $MEDIA_URL --activate\"}" \
              -s -w "%{http_code}")
          else
            INSTALL_RESPONSE=$(curl -X POST "$WP_SITE_URL/wp-json/wp-cli/v1/cli" \
              --user "$WP_USERNAME:$WP_PASSWORD" \
              -H "Content-Type: application/json" \
              -d "{\"command\":\"plugin install $MEDIA_URL --activate\"}" \
              -s -w "%{http_code}")
          fi
          
          INSTALL_HTTP_CODE="${INSTALL_RESPONSE: -3}"
          INSTALL_BODY="${INSTALL_RESPONSE%???}"
          
          if [ "$INSTALL_HTTP_CODE" -eq 200 ]; then
            echo ":white_check_mark: Plugin successfully installed and activated"
            echo ":package: Plugin URL: $MEDIA_URL"
            
            # Clean up: Delete the uploaded zip file from media library
            echo "Cleaning up: Deleting uploaded zip file from media library..."
            if [ -n "$TOKEN" ]; then
              DELETE_RESPONSE=$(curl -X DELETE "$WP_SITE_URL/wp-json/wp/v2/media/$MEDIA_ID?force=true" \
                -H "Authorization: Bearer $TOKEN" \
                -s -w "%{http_code}")
            else
              DELETE_RESPONSE=$(curl -X DELETE "$WP_SITE_URL/wp-json/wp/v2/media/$MEDIA_ID?force=true" \
                --user "$WP_USERNAME:$WP_PASSWORD" \
                -s -w "%{http_code}")
            fi
            
            DELETE_HTTP_CODE="${DELETE_RESPONSE: -3}"
            if [ "$DELETE_HTTP_CODE" -eq 200 ]; then
              echo ":wastebasket: Zip file successfully deleted from media library"
            else
              echo ":warning: Could not delete zip file from media library (non-critical)"
            fi
            
            echo ":rocket: Plugin deployment completed successfully!"
          else
            echo ":x: Failed to install plugin via WP-CLI"
            echo "HTTP Code: $INSTALL_HTTP_CODE"
            echo "Response: $INSTALL_BODY"
            
            # Fallback: Provide manual installation instructions
            echo ":information_source: Manual installation may be required"
            echo ":package: Plugin zip is available at: $MEDIA_URL"
            echo ":gear: You can manually install this plugin from the WordPress admin dashboard"
            
            exit 1
          fi