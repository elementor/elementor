#!/bin/bash
set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Get current version from packages and calculate new patch version
calculate_new_version() {
    log_info "Calculating new patch version..."
    
    # Navigate to packages directory and use version-manager
    cd packages
    
    # Get current version from packages using version-manager
    CURRENT_PACKAGES_VERSION=$(node scripts/version-manager/index.js list --publishable | grep -E "@elementor/" | head -1 | awk '{print $2}' || echo "")
    
    if [[ -z "$CURRENT_PACKAGES_VERSION" ]]; then
        log_error "Could not determine current packages version"
        exit 1
    fi
    
    log_info "Current packages version: $CURRENT_PACKAGES_VERSION"
    
    # Calculate new patch version using version-manager bump command in dry-run mode
    log_info "Calculating new patch version using @version-manager..."
    NEW_VERSION=$(node scripts/version-manager/index.js bump patch --dry-run | grep -E "Would update.*packages to version" | sed -n 's/.*to version \([^ ]*\).*/\1/p' || echo "")
    
    if [[ -z "$NEW_VERSION" ]]; then
        log_error "Could not calculate new patch version using @version-manager"
        exit 1
    fi
    
    log_success "New patch version calculated: $NEW_VERSION"
    
    # Go back to root directory
    cd ..
}

# Update package versions using version-manager
update_versions() {
    log_info "Updating package versions..."
    
    cd packages
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "DRY RUN: Would bump patch version to $NEW_VERSION"
        node scripts/version-manager/index.js bump patch --dry-run
    else
        log_info "Bumping patch version to $NEW_VERSION using @version-manager"
        node scripts/version-manager/index.js bump patch --yes
        
        # Verify the update was successful
        UPDATED_VERSION=$(node scripts/version-manager/index.js list --publishable | grep -E "@elementor/" | head -1 | awk '{print $2}' || echo "")
        
        if [[ "$UPDATED_VERSION" != "$NEW_VERSION" ]]; then
            log_error "Version update failed. Expected: $NEW_VERSION, Got: $UPDATED_VERSION"
            exit 1
        fi
        
        log_success "Package versions updated successfully"
    fi
    
    cd ..
}

# Create or update pull request
create_pull_request() {
    log_info "Preparing pull request..."
    
    # Configure git
    git config --global user.email "github-actions@github.com"
    git config --global user.name "GitHub Actions"
    
    BRANCH_NAME="version-bump/patch-$NEW_VERSION"
    PR_TITLE="Version bump: Update packages to $NEW_VERSION"
    PR_BODY="Automated patch version bump from $CURRENT_PACKAGES_VERSION to $NEW_VERSION

## Changes
- 🔧 Bump all package versions to $NEW_VERSION
- 📦 Update internal dependencies to new version

## Generated by
- Workflow: $GITHUB_WORKFLOW
- Run ID: $GITHUB_RUN_ID
- Triggered by: $GITHUB_ACTOR"

    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "DRY RUN: Would create PR with the following details:"
        log_info "Branch: $BRANCH_NAME"
        log_info "Title: $PR_TITLE"
        log_info "Body: $PR_BODY"
        return
    fi
    
    # Check if there are any changes
    if git diff --quiet && git diff --cached --quiet; then
        log_info "No changes detected, skipping PR creation"
        return
    fi
    
    # Create new branch for the version bump
    git checkout -b "$BRANCH_NAME"
    
    # Stage and commit changes
    git add packages/
    git commit -m "Bump packages version to $NEW_VERSION

- Update all package versions from $CURRENT_PACKAGES_VERSION to $NEW_VERSION
- Update internal package dependencies

[skip ci]"
    
    # Push the branch
    git push origin "$BRANCH_NAME"
    
    # Create pull request using GitHub CLI
    gh pr create \
        --title "$PR_TITLE" \
        --body "$PR_BODY" \
        --base "$CURRENT_BRANCH" \
        --head "$BRANCH_NAME" \
        --label "automated" \
        --label "version-bump"
    
    log_success "Pull request created successfully"
}

# Update PACKAGE_VERSION environment variable
update_env_var() {
    log_info "Updating PACKAGE_VERSION environment variable..."
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "DRY RUN: Would update PACKAGE_VERSION from $PACKAGE_VERSION to $NEW_VERSION"
        return
    fi
    
    # Update the GitHub environment variable for subsequent steps
    echo "PACKAGE_VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    log_success "PACKAGE_VERSION updated from $PACKAGE_VERSION to $NEW_VERSION"
}

# Main execution
main() {
    log_info "🚀 Starting patch version update process..."
    
    calculate_new_version
    update_versions
    create_pull_request
    update_env_var
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_warning "🔍 DRY RUN COMPLETED - No actual changes were made"
    else
        log_success "🎉 Patch version update process completed successfully!"
        log_success "New version: $NEW_VERSION"
    fi
}

# Run main function
main "$@"
