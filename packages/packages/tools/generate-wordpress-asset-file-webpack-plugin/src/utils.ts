import { type RequestToHandleMap } from './types';

export function getAssetFileContent( entryHandle: string, depsHandles: string[] ) {
	const depsAsString = depsHandles
		.filter( ( dep ) => dep !== entryHandle )
		.sort()
		.map( ( dep ) => `'${ dep }',` )
		.join( '\n\t\t' );

	return `<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}
/**
 * This file is generated by Webpack, do not edit it directly.
 */
return [
	'handle' => '${ entryHandle }',
	'deps' => [
		${ depsAsString }
	],
];
`;
}

export function transformRequestToHandle( request: string | undefined, map: RequestToHandleMap ) {
	if ( ! request ) {
		return request;
	}

	for ( const item of map ) {
		let { request: requestRegex, handle } = item;

		if ( ! ( requestRegex instanceof RegExp ) ) {
			requestRegex = new RegExp( `^${ requestRegex }$` );
		}

		const matches = request.match( requestRegex );

		if ( matches ) {
			return request.replace( requestRegex, handle );
		}
	}
}

export function createAssetFilePath( path: string, suffix = '.asset.php' ) {
	return path.replace( /(\.min)?\.js$/i, suffix );
}
