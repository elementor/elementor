"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  GenerateWordPressAssetFileWebpackPlugin: () => GenerateWordPressAssetFileWebpackPlugin
});
module.exports = __toCommonJS(index_exports);

// src/plugin.ts
var import_webpack = require("webpack");

// src/utils.ts
function getAssetFileContent(entryHandle, depsHandles) {
  const depsAsString = depsHandles.filter((dep) => dep !== entryHandle).sort().map((dep) => `'${dep}',`).join("\n		");
  return `<?php
if ( ! defined( 'ABSPATH' ) ) {
	exit;
}
/**
 * This file is generated by Webpack, do not edit it directly.
 */
return [
	'handle' => '${entryHandle}',
	'deps' => [
		${depsAsString}
	],
];
`;
}
function transformRequestToHandle(request, map) {
  if (!request) {
    return request;
  }
  for (const item of map) {
    let { request: requestRegex, handle } = item;
    if (!(requestRegex instanceof RegExp)) {
      requestRegex = new RegExp(`^${requestRegex}$`);
    }
    const matches = request.match(requestRegex);
    if (matches) {
      return request.replace(requestRegex, handle);
    }
  }
}
function createAssetFilePath(path, suffix = ".asset.php") {
  return path.replace(/(\.min)?\.js$/i, suffix);
}

// src/plugin.ts
var GenerateWordPressAssetFileWebpackPlugin = class {
  options;
  constructor(options) {
    this.options = options;
  }
  apply(compiler) {
    compiler.hooks.thisCompilation.tap(this.constructor.name, (compilation) => {
      compilation.hooks.processAssets.tap({ name: this.constructor.name }, () => {
        [...compilation.entrypoints].forEach(([entryName, entrypoint]) => {
          const chunk = entrypoint.chunks.find(({ name }) => name === entryName);
          if (!chunk) {
            return;
          }
          this.addAssetFileToEntrypoint(compilation, entryName, chunk);
        });
      });
    });
  }
  addAssetFileToEntrypoint(compilation, entryName, chunk) {
    const chunkJSFile = this.getFileFromChunk(chunk);
    if (!chunkJSFile) {
      return;
    }
    const transformEntryNameToHandle = this.options.handle;
    const entryHandle = transformEntryNameToHandle(entryName);
    const depsHandles = this.getDepsHandlesFromChunk(compilation, chunk);
    const assetFilePath = createAssetFilePath(compilation.getPath("[file]", { filename: chunkJSFile }));
    compilation.assets[assetFilePath] = new import_webpack.sources.RawSource(getAssetFileContent(entryHandle, depsHandles));
    chunk.files.add(assetFilePath);
  }
  getDepsHandlesFromChunk(compilation, chunk) {
    const depsSet = /* @__PURE__ */ new Set();
    compilation.chunkGraph.getChunkModules(chunk).forEach((module2) => {
      const theModule = module2;
      [...theModule.modules || [], theModule].forEach((subModule) => {
        const depHandle = transformRequestToHandle(subModule.userRequest, this.options.map);
        if (depHandle) {
          depsSet.add(depHandle);
        }
      });
    });
    return [...depsSet];
  }
  getFileFromChunk(chunk) {
    return [...chunk.files].find((f) => /\.js$/i.test(f));
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  GenerateWordPressAssetFileWebpackPlugin
});
//# sourceMappingURL=index.js.map